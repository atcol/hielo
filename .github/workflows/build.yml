name: Build Cross-Platform

on:
  workflow_call:
    inputs:
      upload_artifacts:
        description: 'Whether to upload build artifacts'
        required: false
        type: boolean
        default: true
      artifact_retention_days:
        description: 'How long to keep artifacts (days)'
        required: false
        type: number
        default: 7
      build_profile:
        description: 'Cargo build profile (debug or release)'
        required: false
        type: string
        default: 'release'
      cancel_in_progress:
        description: 'Whether to cancel in-progress builds'
        required: false
        type: boolean
        default: true
    outputs:
      artifact_names:
        description: 'JSON array of artifact names created'
        value: ${{ jobs.build.outputs.artifact_names }}

# Conditional concurrency control - only for non-release builds
concurrency:
  group: ${{ inputs.cancel_in_progress && format('build-{0}', github.ref) || '' }}
  cancel-in-progress: ${{ inputs.cancel_in_progress }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    outputs:
      artifact_names: ${{ steps.set_artifacts.outputs.names }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: hielo
            asset_name: hielo-linux-x86_64
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: hielo
            asset_name: hielo-linux-aarch64
            cross: true
            
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: hielo
            asset_name: hielo-macos-x86_64
            
          # macOS ARM64 (M1/M2)
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: hielo
            asset_name: hielo-macos-aarch64
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: hielo.exe
            asset_name: hielo-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross
        # For Linux ARM64 cross-compilation
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-${{ inputs.build_profile }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-${{ inputs.build_profile }}-cargo-build-

    # Linux specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux' && !matrix.cross
      run: |
        sudo apt-get update
        
        # Try newer package names first, fallback to older ones
        if apt-cache show libwebkit2gtk-4.1-dev >/dev/null 2>&1; then
          WEBKIT_PKG="libwebkit2gtk-4.1-dev"
        else
          WEBKIT_PKG="libwebkit2gtk-4.0-dev"
        fi
        
        sudo apt-get install -y \
          libgtk-3-dev \
          $WEBKIT_PKG \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libxdo-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev
          
        echo "Installed WebKit package: $WEBKIT_PKG"

    # macOS specific dependencies  
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # Ensure we have the right SDK for cross-compilation
        if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
          echo "Building for Apple Silicon (M1/M2)"
        fi

    # Windows specific setup
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Ensure WebView2 is available (pre-installed on GitHub runners)
        echo "WebView2 should be pre-installed on GitHub Actions Windows runners"

    - name: Run tests (native only)
      if: "!matrix.cross"
      run: cargo test --verbose

    - name: Build binary
      run: |
        BUILD_FLAG=""
        if [[ "${{ inputs.build_profile }}" == "release" ]]; then
          BUILD_FLAG="--release"
        fi
        
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build $BUILD_FLAG --target ${{ matrix.target }} --verbose
        else
          cargo build $BUILD_FLAG --target ${{ matrix.target }} --verbose
        fi
      shell: bash
      env:
        # Ensure proper cross-compilation environment
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Strip binary (Unix, release only)
      if: runner.os != 'Windows' && inputs.build_profile == 'release'
      run: |
        strip target/${{ matrix.target }}/${{ inputs.build_profile }}/${{ matrix.artifact_name }}

    - name: Prepare binary for upload
      if: inputs.upload_artifacts
      run: |
        mkdir -p artifacts
        BINARY_PATH="target/${{ matrix.target }}/${{ inputs.build_profile }}/${{ matrix.artifact_name }}"
        
        # Copy binary to artifacts directory
        cp "$BINARY_PATH" "artifacts/${{ matrix.asset_name }}"
        
        # Create checksum using the appropriate tool for each platform
        cd artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # Windows: Use PowerShell Get-FileHash
          powershell -command "(Get-FileHash -Algorithm SHA256 '${{ matrix.asset_name }}').Hash.ToLower() + '  ${{ matrix.asset_name }}'" > ${{ matrix.asset_name }}.sha256
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          # macOS: Use shasum
          shasum -a 256 "${{ matrix.asset_name }}" > "${{ matrix.asset_name }}.sha256"
        else
          # Linux: Use sha256sum
          sha256sum "${{ matrix.asset_name }}" > "${{ matrix.asset_name }}.sha256"
        fi
        
        echo "Created artifacts:"
        ls -la
      shell: bash

    - name: Upload build artifacts
      if: inputs.upload_artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          artifacts/${{ matrix.asset_name }}
          artifacts/${{ matrix.asset_name }}.sha256
        retention-days: ${{ inputs.artifact_retention_days }}

    - name: Set artifact names output
      id: set_artifacts
      if: inputs.upload_artifacts
      run: |
        echo "names=[\"${{ matrix.asset_name }}\"]" >> $GITHUB_OUTPUT
      shell: bash
