name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: iceberg-table-viewer
            asset_name: iceberg-table-viewer-linux-x86_64
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: iceberg-table-viewer
            asset_name: iceberg-table-viewer-linux-aarch64
            cross: true
            
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: iceberg-table-viewer
            asset_name: iceberg-table-viewer-macos-x86_64
            
          # macOS ARM64 (M1/M2)
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: iceberg-table-viewer
            asset_name: iceberg-table-viewer-macos-aarch64
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: iceberg-table-viewer.exe
            asset_name: iceberg-table-viewer-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross
        # For Linux ARM64 cross-compilation
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-build-

    # Linux specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libxdo-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    # macOS specific dependencies  
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # Ensure we have the right SDK for cross-compilation
        if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
          echo "Building for Apple Silicon (M1/M2)"
        fi

    # Windows specific setup
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Ensure WebView2 is available (pre-installed on GitHub runners)
        echo "WebView2 should be pre-installed on GitHub Actions Windows runners"

    - name: Run tests
      run: cargo test --verbose

    - name: Build release binary
      run: |
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }} --verbose
        else
          cargo build --release --target ${{ matrix.target }} --verbose
        fi
      shell: bash
      env:
        # Ensure proper cross-compilation environment
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        # macOS cross-compilation from macOS runners works natively
        # Windows compilation works natively on Windows runners

    - name: Strip binary (Unix)
      if: runner.os != 'Windows'
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Prepare binary for upload
      run: |
        mkdir -p artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}
        retention-days: 30

  # Create GitHub Release on tag push
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create checksums
      run: |
        cd artifacts
        for dir in */; do
          cd "$dir"
          sha256sum * > checksums.txt
          cd ..
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: true
        files: |
          artifacts/*/iceberg-table-viewer-*
          artifacts/*/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Additional job for development builds (non-release)
  dev-build:
    name: Development Build
    needs: build
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    
    steps:
    - name: Download Linux x86_64 artifact
      uses: actions/download-artifact@v4
      with:
        name: iceberg-table-viewer-linux-x86_64
        path: ./
        
    - name: Make artifact executable
      run: chmod +x iceberg-table-viewer-linux-x86_64
        
    - name: Upload development build
      uses: actions/upload-artifact@v4
      with:
        name: iceberg-table-viewer-dev-${{ github.sha }}
        path: iceberg-table-viewer-linux-x86_64
        retention-days: 7
